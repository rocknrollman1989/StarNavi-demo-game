{"version":3,"sources":["components/sections/LeaderListSection/index.module.css","components/sections/GameDisplaySection/index.module.css","pages/MainPage.module.css","helpers/index.js","components/formInputs/CustomTextInput/index.jsx","components/formInputs/CustomSelectInput/index.jsx","components/GameCell/index.jsx","store/actions/gameDisplay/api.js","store/actionTypes/gameDisplayConstants.js","store/actions/gameDisplay/actionCreators.js","store/actions/leaderBoard/api.js","store/actionTypes/leaderBoardConstants.js","store/actions/leaderBoard/actionCreators.js","store/actions/leaderBoard/index.js","components/sections/GameFieldSection/index.jsx","store/actions/gameDisplay/index.js","components/sections/GameDisplaySection/index.jsx","components/LeaderListContainer/index.jsx","components/sections/LeaderListSection/index.jsx","pages/MainPage.jsx","App.js","store/reducers/leaderBoardReducer/index.js","store/reducers/gameDisplayReducer/index.js","store/index.js","axiosConfig/index.js","index.js","components/GameCell/index.module.css"],"names":["module","exports","findRandomCell","totalCellNumber","usedCells","max","randomCell","Math","floor","random","includes","CustomTextInput","setPlayerName","disabled","type","onChange","e","value","target","CustomSelectInput","options","setGameOptions","option","length","map","item","Object","keys","key","GameCell","state","userActiveCell","computerActiveCell","handleClick","props","gamerClick","activeCell","setState","computerClick","prevProps","cellId","this","className","style","game__cell","game__cell_active","game__cell_user","game__cell_computer","onClick","aria-hidden","React","Component","connect","gameDisplay","axios","get","data","post","ERROR","SET_GAME_OPTIONS","SET_GAME_VALUES","SET_ACTIVE_CELL","SET_WINNER","GAME_DISPLAY_CONSTANTS","CLEAR_WINNER_NAME","ERROR_LOAD","SET_DATA","LEADER_BOARD","getLeaderList","dispatch","api","then","res","LEADER_BOARD_ACTIONS","catch","GameFieldSection","userCLickedCells","computerUsedCells","gameStart","selectedGame","field","startInterval","changeActiveCell","setInterval","checkGameProgress","delay","restartInterval","stopIntnerval","setNewActiveCell","clearInterval","setWinner","setNewWinner","gamerName","prevState","isGameProcess","column","row","i","j","push","selectedGameValue","GAME_DISPLAY_ACTIONS","setActiveCell","momentDate","moment","format","winner","date","gameSelectOptions","gameOptions","snake","replace","getOptions","setGame","deleteWinner","useState","gameMode","setGameMode","userName","setUserName","setIsGameProcess","useEffect","game__display","LeaderListContainer","leaderBoard","isGetListError","isError","leaderList","leader","person","index","id","leader__list","leader__container","MainPage","game__container","App","initialState","leaderBoardReducer","action","reducers","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","defaults","baseURL","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.61fce090.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"leader__list\":\"LeaderListSection_leader__list__2AzYC\",\"leader__container\":\"LeaderListSection_leader__container__3qDAs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"game__display\":\"GameDisplaySection_game__display__1lzDW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"game__container\":\"MainPage_game__container__3kgEm\"};","import snake from 'to-snake-case';\n\nexport const createSelectOptionsArray = (data) => {\n  if (data) {\n    return Object.keys(data).map((key) => ({\n      [key]: snake(key).replace('_', ' '),\n    }));\n  }\n  return [];\n};\n\nconst getRandomInt = (max) => Math.floor(Math.random() * max);\n\nexport const findRandomCell = (totalCellNumber, usedCells) => {\n  let randomCell = getRandomInt(totalCellNumber);\n\n  if (randomCell === 0) {\n    return findRandomCell(totalCellNumber, usedCells);\n  }\n  if (usedCells.includes(randomCell)) {\n    randomCell += 1;\n  }\n  if (usedCells.includes(randomCell) || randomCell > totalCellNumber) {\n    return findRandomCell(totalCellNumber, usedCells);\n  }\n  return randomCell;\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst CustomTextInput = ({ setPlayerName, disabled }) => {\n  const onchange = (e) => {\n    const { value } = e.target;\n    setPlayerName(value);\n  };\n\n  return (\n    <>\n      <input type=\"text\" onChange={onchange} disabled={disabled} />\n    </>\n  );\n};\n\nCustomTextInput.propTypes = {\n  setPlayerName: PropTypes.func,\n  disabled: PropTypes.bool,\n};\n\nexport default CustomTextInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n\nconst CustomSelectInput = ({ options, setGameOptions, disabled }) => {\n  const setGameOption = (e) => {\n    const { value } = e.target;\n    setGameOptions(value);\n  };\n\n  const option = options && options.length ? options.map((item) => (\n    Object.keys(item).map((key) => (\n      <option key={item[key]} value={key}>{item[key]}</option>\n    ))\n  )) : null;\n  return (\n    <>\n      <select onChange={setGameOption} disabled={disabled}>\n        <option value=\"\">select game mode</option>\n        {option}\n      </select>\n    </>\n  );\n};\n\nCustomSelectInput.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.shape({})),\n  setGameOptions: PropTypes.func,\n  disabled: PropTypes.bool,\n};\n\nexport default CustomSelectInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport style from './index.module.css';\n\nclass GameCell extends React.Component {\n  state = {\n    userActiveCell: false,\n    computerActiveCell: false,\n  }\n\n  componentDidUpdate(prevProps) {\n    const { cellId } = this.props;\n    const { userActiveCell } = this.state;\n    if (userActiveCell) {\n      return;\n    }\n    if (cellId === prevProps.activeCell) {\n      this.computerClick();\n    }\n  }\n\n  handleClick = () => {\n    const { gamerClick, activeCell } = this.props;\n    this.setState({\n      userActiveCell: true,\n    });\n    gamerClick(activeCell);\n  };\n\n  computerClick = () => {\n    const { computerClick, activeCell } = this.props;\n    this.setState({\n      computerActiveCell: true,\n    });\n    computerClick(activeCell);\n  };\n\n  render() {\n    const { activeCell, cellId } = this.props;\n    const { userActiveCell, computerActiveCell } = this.state;\n\n    return (\n      <>\n        <div\n          className={`${style.game__cell} ${cellId === activeCell ? style.game__cell_active : ''} ${userActiveCell ? style.game__cell_user : ''} ${computerActiveCell ? style.game__cell_computer : ''}`}\n          onClick={cellId === activeCell ? () => { this.handleClick(); } : null}\n          aria-hidden=\"true\"\n        />\n      </>\n    );\n  }\n}\n\nGameCell.propTypes = {\n  gamerClick: PropTypes.func,\n  activeCell: PropTypes.number,\n  cellId: PropTypes.number,\n  computerClick: PropTypes.func,\n};\n\nconst mapStateToProps = (state) => {\n  const { gameDisplay } = state;\n  return {\n    activeCell: gameDisplay.activeCell,\n  };\n};\n\nexport default connect(mapStateToProps, null)(GameCell);\n","import axios from 'axios';\n\nexport default {\n  getGameOptions: () => axios.get('/game-settings'),\n  postWinnerResault: (data) => axios.post('/winners', data),\n};\n","export default {\n  ERROR: 'ERROR',\n  SET_GAME_OPTIONS: 'SET_GAME_OPTIONS',\n  SET_GAME_VALUES: 'SET_GAME_VALUES',\n  SET_ACTIVE_CELL: 'SET_ACTIVE_CELL',\n  SET_WINNER: 'SET_WINNER',\n};\n","import GAME_DISPLAY_CONSTANTS from 'store/actionTypes/gameDisplayConstants';\n\nexport default {\n  ERROR: () => ({ type: GAME_DISPLAY_CONSTANTS.ERROR }),\n  SET_GAME_OPTIONS: (data) => ({ type: GAME_DISPLAY_CONSTANTS.SET_GAME_OPTIONS, data }),\n  SET_GAME_VALUE: (data) => ({ type: GAME_DISPLAY_CONSTANTS.SET_GAME_VALUES, data }),\n  SET_ACTIVE_CELL: (data) => ({ type: GAME_DISPLAY_CONSTANTS.SET_ACTIVE_CELL, data }),\n  SET_WINNER: (data) => ({ type: GAME_DISPLAY_CONSTANTS.SET_WINNER, data }),\n  CLEAR_WINNER_NAME: () => ({ type: GAME_DISPLAY_CONSTANTS.CLEAR_WINNER_NAME }),\n};\n","import axios from 'axios';\n\nexport default {\n  getLeaderlist: () => (\n    axios.get('/winners')\n  ),\n};\n","export default {\n  ERROR_LOAD: 'ERROR_LOAD',\n  SET_DATA: 'SET_DATA',\n};\n","import LEADER_BOARD from 'store/actionTypes/leaderBoardConstants';\n\nexport default {\n  ERROR: () => ({ type: LEADER_BOARD.ERROR_LOAD }),\n  SET_DATA: (data) => ({ type: LEADER_BOARD.SET_DATA, data: [...data] }),\n};\n","\nimport api from './api';\nimport LEADER_BOARD_ACTIONS from './actionCreators';\n\nexport const getLeaderList = () => (dispatch) => {\n  api.getLeaderlist()\n    .then((res) => {\n      const { data } = res;\n      return dispatch(LEADER_BOARD_ACTIONS.SET_DATA(data));\n    })\n    .catch(() => dispatch(LEADER_BOARD_ACTIONS.ERROR()));\n};\n\nexport default getLeaderList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport GameCell from 'components/GameCell';\nimport { findRandomCell } from 'helpers';\nimport { connect } from 'react-redux';\nimport { setActiveCell, setWinner } from 'store/actions/gameDisplay';\n\nclass GameFieldSection extends React.Component {\n  state = {\n    totalCellNumber: null,\n    usedCells: [],\n    userCLickedCells: 0,\n    computerUsedCells: 0,\n  }\n\n  componentDidMount() {\n    this.gameStart();\n  }\n\n  shouldComponentUpdate(prevProps, prevState) {\n    const {\n      usedCells, userCLickedCells, computerUsedCells,\n    } = this.state;\n    const { isGameProcess } = this.props;\n    if (usedCells.length !== prevState.usedCells.length) {\n      return false;\n    }\n    if (userCLickedCells !== prevState.userCLickedCells) {\n      return false;\n    }\n    if (computerUsedCells !== prevState.computerUsedCells) {\n      return false;\n    }\n    if (prevProps.isGameProcess !== isGameProcess && prevProps.isGameProcess === true) {\n      this.gameStart();\n    }\n    return true;\n  }\n\n  componentWillUnmount() {\n    this.stopIntnerval();\n  }\n\n  gameStart = () => {\n    const { selectedGame } = this.props;\n    this.setState({\n      totalCellNumber: selectedGame.field ** 2,\n      usedCells: [],\n      userCLickedCells: 0,\n      computerUsedCells: 0,\n    }, () => {\n      this.startInterval();\n    });\n  }\n\n  startInterval = () => {\n    const { selectedGame } = this.props;\n\n    this.changeActiveCell = setInterval(() => {\n      this.checkGameProgress();\n    }, selectedGame.delay);\n  }\n\n  restartInterval = () => {\n    this.stopIntnerval();\n    this.checkGameProgress();\n    this.startInterval();\n  }\n\n  stopIntnerval = () => {\n    const { setNewActiveCell } = this.props;\n    clearInterval(this.changeActiveCell);\n    setNewActiveCell(null);\n  }\n\n  checkGameProgress = () => {\n    const { usedCells, totalCellNumber } = this.state;\n    const { setNewActiveCell } = this.props;\n    if (usedCells.length >= totalCellNumber) {\n      this.stopIntnerval();\n      this.setWinner();\n      return;\n    }\n    setNewActiveCell(findRandomCell(totalCellNumber, usedCells));\n  }\n\n  gamerClick = (cellId) => {\n    const { usedCells, userCLickedCells } = this.state;\n    this.setState({\n      usedCells: [...usedCells, cellId],\n      userCLickedCells: userCLickedCells + 1,\n    },\n    () => {\n      this.restartInterval();\n    });\n  };\n\n  computerClick = (cellId) => {\n    const { usedCells, computerUsedCells } = this.state;\n    this.setState({\n      usedCells: [...usedCells, cellId],\n      computerUsedCells: computerUsedCells + 1,\n    });\n  }\n\n  setWinner = () => {\n    const { setNewWinner, gamerName } = this.props;\n    const { userCLickedCells, computerUsedCells } = this.state;\n    const winner = userCLickedCells > computerUsedCells ? gamerName : 'computer';\n    setNewWinner(winner);\n  }\n\n  render() {\n    const { selectedGame } = this.props;\n\n    const GameField = () => {\n      const column = [];\n      let cellId = 1;\n\n      if (selectedGame.field) {\n        let row = [];\n        for (let i = 0; i < selectedGame.field; i += 1) {\n          for (let j = 0; j < selectedGame.field; j += 1) {\n            row.push(<GameCell\n              key={cellId}\n              cellId={cellId}\n              gamerClick={this.gamerClick}\n              computerClick={this.computerClick}\n            />);\n            cellId += 1;\n          }\n          column.push(\n            <div className=\"l-row\" key={i}>{row}</div>,\n          );\n          row = [];\n        }\n        return column;\n      }\n      return null;\n    };\n\n    return (\n      <div className=\"game-field\">\n        <GameField />\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  setNewActiveCell: (value) => dispatch(setActiveCell(value)),\n  setNewWinner: (value) => dispatch(setWinner(value)),\n});\n\nconst mapStateToProps = (state) => {\n  const { gameDisplay } = state;\n  return {\n    selectedGame: gameDisplay.selectedGameValue,\n    gamerName: gameDisplay.gamerName,\n  };\n};\n\nGameFieldSection.propTypes = {\n  field: PropTypes.number,\n  setNewActiveCell: PropTypes.func,\n  setNewWinner: PropTypes.func,\n  gamerName: PropTypes.string,\n  isGameProcess: PropTypes.bool,\n  selectedGame: PropTypes.shape({\n    field: PropTypes.number, delay: PropTypes.number,\n  }),\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GameFieldSection);\n","import moment from 'moment';\nimport api from './api';\nimport GAME_DISPLAY_ACTIONS from './actionCreators';\nimport { getLeaderList } from '../leaderBoard';\n\nexport const getGameOptions = () => (dispatch) => {\n  api.getGameOptions()\n    .then((res) => {\n      const { data } = res;\n      return dispatch(GAME_DISPLAY_ACTIONS.SET_GAME_OPTIONS(data));\n    })\n    .catch(() => dispatch(GAME_DISPLAY_ACTIONS.ERROR()));\n};\n\nexport const setWinner = (value) => (dispatch) => {\n  const momentDate = moment().format('HH:mm; DD MMMM YYYY');\n\n  const gamerDataToSend = {\n    winner: value,\n    date: momentDate,\n  };\n  api.postWinnerResault(gamerDataToSend)\n    .then(() => {\n      dispatch(getLeaderList());\n      return dispatch(GAME_DISPLAY_ACTIONS.SET_WINNER(value));\n    })\n    .catch(() => {\n      dispatch(GAME_DISPLAY_ACTIONS.ERROR());\n    });\n};\n\nexport const setGameValue = (gameValue) => GAME_DISPLAY_ACTIONS.SET_GAME_VALUE(gameValue);\nexport const setActiveCell = (value) => GAME_DISPLAY_ACTIONS.SET_ACTIVE_CELL(value);\nexport const clearWinner = () => GAME_DISPLAY_ACTIONS.CLEAR_WINNER_NAME();\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { createSelectOptionsArray } from 'helpers';\nimport CustomTextInput from 'components/formInputs/CustomTextInput';\nimport CustomSelectInput from 'components/formInputs/CustomSelectInput';\nimport GameFieldSection from 'components/sections/GameFieldSection';\nimport { getGameOptions, setGameValue, clearWinner } from 'store/actions/gameDisplay';\nimport style from './index.module.css';\n\nconst GameDisplaySection = (props) => {\n  const {\n    getOptions, gameSelectOptions, setGame, selectedGame, winner, deleteWinner,\n  } = props;\n  const [gameMode, setGameMode] = useState('');\n  const [userName, setUserName] = useState('');\n  const [isGameProcess, setIsGameProcess] = useState(false);\n\n  useEffect(() => {\n    getOptions();\n  }, []);\n\n  useEffect(() => {\n    setIsGameProcess(false);\n  }, [winner]);\n\n  const setPlayerName = (value) => {\n    setUserName(value);\n  };\n\n  const setGameOptions = (option) => {\n    setGameMode(option);\n  };\n\n  const startGame = () => {\n    setIsGameProcess(true);\n    deleteWinner();\n    setGame({ gameMode, userName });\n  };\n\n  return (\n    <div className={`${style.game__display} l-row`}>\n      <div className=\"l-column\">\n        <div className=\"l-row\">\n          <CustomSelectInput\n            options={gameSelectOptions}\n            setGameOptions={setGameOptions}\n            disabled={isGameProcess ? true : null}\n          />\n          <CustomTextInput\n            setPlayerName={setPlayerName}\n            disabled={isGameProcess ? true : null}\n          />\n          <button type=\"button\" onClick={() => { startGame(); }} disabled={gameMode && userName && !isGameProcess ? null : true}>Play</button>\n        </div>\n        { winner && <h1>{`${winner} WIN!`}</h1>}\n        { selectedGame && Object.keys(selectedGame).length && <GameFieldSection isGameProcess={isGameProcess} />}\n      </div>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  getOptions: () => dispatch(getGameOptions()),\n  setGame: (value) => dispatch(setGameValue(value)),\n  deleteWinner: () => clearWinner(),\n});\n\nconst mapStateToProps = (state) => {\n  const { gameDisplay } = state;\n  return {\n    gameSelectOptions: createSelectOptionsArray(gameDisplay.gameOptions),\n    selectedGame: gameDisplay.selectedGameValue,\n    winner: gameDisplay.winner,\n  };\n};\n\nGameDisplaySection.propTypes = {\n  getOptions: PropTypes.func,\n  gameSelectOptions: PropTypes.arrayOf(PropTypes.shape({})),\n  setGame: PropTypes.func,\n  deleteWinner: PropTypes.func,\n  winner: PropTypes.string,\n  selectedGame: PropTypes.shape({\n    field: PropTypes.number, delay: PropTypes.number,\n  }),\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GameDisplaySection);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst LeaderListContainer = ({ winner, date }) => (\n  <div className=\"l-row\">\n    { winner && <p>{ winner }</p> }\n    { date && <p>{ date }</p> }\n  </div>\n);\n\nLeaderListContainer.propTypes = {\n  winner: PropTypes.string,\n  date: PropTypes.string,\n};\n\nexport default LeaderListContainer;\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport getLeaderList from 'store/actions/leaderBoard';\nimport LeaderListContainer from 'components/LeaderListContainer';\nimport style from './index.module.css';\n\nconst LeaderListSection = (props) => {\n  useEffect(() => {\n    props.getLeaderList();\n  }, []);\n\n  const { isGetListError, leaderList } = props;\n  const leader = leaderList && leaderList.length\n    ? leaderList.map((person, index) => {\n      if (leaderList.length - 5 < index) {\n        return <LeaderListContainer winner={person.winner} date={person.date} key={person.id} />;\n      }\n      return null;\n    })\n    : null;\n\n  return (\n    <div className={`${style.leader__list} l-row`}>\n      <div className=\"l-column\">\n        <h2>Leader Board</h2>\n        { isGetListError && <h3>Sorry, we can&apos;t load leader&apos;s tabble</h3> }\n        <div className={`${style.leader__container} l-column`}>\n          { leader }\n        </div>\n      </div>\n    </div>\n  );\n};\n\nLeaderListSection.propTypes = {\n  getLeaderList: PropTypes.func,\n  isGetListError: PropTypes.bool,\n  leaderList: PropTypes.arrayOf(PropTypes.shape({})),\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  getLeaderList: () => dispatch(getLeaderList()),\n});\n\nconst mapStateToProps = (state) => {\n  const { leaderBoard } = state;\n  return {\n    isGetListError: leaderBoard.isError,\n    leaderList: leaderBoard.leaderList,\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LeaderListSection);\n","import React from 'react';\nimport GameDisplaySection from 'components/sections/GameDisplaySection/index';\nimport LeaderListSection from 'components/sections/LeaderListSection/index';\nimport style from './MainPage.module.css';\n\nconst MainPage = () => (\n  <section className={style.game__container}>\n    <GameDisplaySection />\n    <LeaderListSection />\n  </section>\n);\n\nexport default MainPage;\n","import React from 'react';\nimport MainPage from 'pages/MainPage';\n\nconst App = () => (\n  <MainPage />\n);\nexport default App;\n","import LEADER_BOARD from 'store/actionTypes/leaderBoardConstants';\n\nconst initialState = {\n  leaderList: null,\n  isError: false,\n};\n\nconst leaderBoardReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case LEADER_BOARD.SET_DATA:\n      return {\n        ...state,\n        leaderList: [...action.data],\n        isError: false,\n      };\n    case LEADER_BOARD.ERROR:\n      return {\n        ...state,\n        isError: true,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default leaderBoardReducer;\n","\nimport GAME_DISPLAY_CONSTANTS from 'store/actionTypes/gameDisplayConstants';\n\nconst initialState = {\n  isError: false,\n  gameOptions: null,\n  selectedGameValue: null,\n  activeCell: 2,\n  winner: '',\n  gamerName: '',\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case GAME_DISPLAY_CONSTANTS.SET_GAME_OPTIONS:\n      return {\n        ...state,\n        gameOptions: action.data,\n      };\n    case GAME_DISPLAY_CONSTANTS.SET_GAME_VALUES:\n      return {\n        ...state,\n        selectedGameValue: state.gameOptions[action.data.gameMode],\n        gamerName: action.data.userName,\n      };\n    case GAME_DISPLAY_CONSTANTS.ERROR:\n      return {\n        ...state,\n        isError: true,\n      };\n    case GAME_DISPLAY_CONSTANTS.SET_ACTIVE_CELL:\n      return {\n        ...state,\n        activeCell: action.data,\n      };\n    case GAME_DISPLAY_CONSTANTS.SET_WINNER:\n      return {\n        ...state,\n        winner: action.data,\n      };\n    case GAME_DISPLAY_CONSTANTS.CLEAR_WINNER_NAME:\n      return {\n        ...state,\n        winner: '',\n      };\n    default: return state;\n  }\n};\n","import {\n  createStore, applyMiddleware, combineReducers, compose,\n} from 'redux';\nimport thunk from 'redux-thunk';\nimport leaderBoardReducer from './reducers/leaderBoardReducer';\nimport gameDisplayReducer from './reducers/gameDisplayReducer';\n\nconst reducers = combineReducers({\n  leaderBoard: leaderBoardReducer,\n  gameDisplay: gameDisplayReducer,\n});\n/* eslint-disable no-underscore-dangle */\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  reducers,\n  composeEnhancers(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default store;\n","import axios from 'axios';\n\nexport default () => {\n  axios.defaults.baseURL = 'https://starnavi-frontend-test-task.herokuapp.com/';\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport 'style/main.scss';\nimport store from './store';\nimport initAxiosConfig from './axiosConfig';\n\ninitAxiosConfig();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"game__cell\":\"GameCell_game__cell__17sRD\",\"game__cell_active\":\"GameCell_game__cell_active__2RgYo\",\"game__cell_user\":\"GameCell_game__cell_user__3wGC6\",\"game__cell_computer\":\"GameCell_game__cell_computer__3usvq\"};"],"sourceRoot":""}